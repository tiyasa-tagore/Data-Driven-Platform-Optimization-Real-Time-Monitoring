import os
import pandas as pd

# Step 1: Define paths for input and output files
pycharm_projects_folder = os.path.join(os.path.expanduser("~"), "PycharmProjects")
input_file = os.path.join(pycharm_projects_folder, 'Indices_Data_In.csv')  # Adjusted for Indices data
output_file = os.path.join(pycharm_projects_folder, 'Test_Indices_In.csv')

# Step 2: Define the pip value mapping (sample values)
pip_values = {
    "SPX500": 10.0, "US30": 10.0, "GER30": 10.67, "UK100": 12.20, "NTH25": 21.34, "NDX100": 10.0,
    "JP225": 0.07, "HK50": 1.28, "FRA40": 10.67, "EUSTX50": 10.67, "AUS200": 6.35, "SWI20": 11.08,
    "US2000": 10.0
}

markup_rules = [
    # London Open rules
    ('London Open', 0.01, 1.99, 0.11), ('London Open', 2, 4.99, 0.26),
    ('London Open', 5, 9.99, 0.61), ('London Open', 20, 30, 0.91),

    # Market Open Hour rules
    ('Market Open Hour', 0.01, 1.99, 0.01), ('Market Open Hour', 2, 4.99, 0.21),
    ('Market Open Hour', 5, 9.99, 0.91), ('Market Open Hour', 10, 19.99, 1.01),
    ('Market Open Hour', 20, 30, 1.31),

    # NY Open rules
    ('NY Open', 0.01, 1.99, 0.11), ('NY Open', 2, 4.99, 0.26),
    ('NY Open', 5, 9.99, 0.61), ('NY Open', 10, 19.99, 0.71),
    ('NY Open', 20, 30, 0.91),

    # Regular rules
    ('Regular', 0.01, 1.99, 0.01), ('Regular', 2, 4.99, 0.21),
    ('Regular', 5, 9.99, 0.51), ('Regular', 10, 19.99, 0.71),
    ('Regular', 20, 30, 1.01)
]

# Step 4: Load the dataset
df = pd.read_csv(input_file)

# Step 5: Function to calculate Prev TP broker profit based on original Markup in pips
def calculate_prev_tp_broker_profit(row):
    symbol = row['Platform symbol']
    markup_in_pips = row['Markup in pips']
    volume_lots = row['Volume (lots)']

    if symbol in pip_values:
        pip_value = pip_values[symbol]
        return markup_in_pips * volume_lots * pip_value
    else:
        return 0  # Return 0 if no pip_value is found for the symbol

# Step 6: Function to calculate New Markup in pips
def calculate_new_markup(row):
    symbol = row['Platform symbol']
    markup_in_pips = row['Markup in pips']
    volume_lots = row['Volume (lots)']

    # Apply the markup rules based on volume and markup thresholds
    for rule, min_lot, max_lot, min_markup in markup_rules:
        if min_lot <= volume_lots <= max_lot and markup_in_pips < min_markup:
            return min_markup
    return None  # Return blank (None) if markup is higher than threshold

# Step 7: Function to calculate New TP broker profit based on New Markup in pips
def calculate_new_tp_broker_profit(row):
    symbol = row['Platform symbol']
    new_markup_in_pips = row['New Markup in pips']
    volume_lots = row['Volume (lots)']

    if pd.isna(new_markup_in_pips):
        return None  # Skip calculation if new_markup_in_pips is blank

    if symbol in pip_values:
        pip_value = pip_values[symbol]
        return new_markup_in_pips * volume_lots * pip_value
    else:
        return 0  # Return 0 if no pip_value is found for the symbol

# Step 8: Function to calculate Specific Prev TP broker profit
def calculate_specific_prev_tp_broker_profit(row):
    new_tp_broker_profit = row['New TP broker profit']
    prev_tp_broker_profit = row['Prev TP broker profit']

    if pd.isna(new_tp_broker_profit):
        return None  # Return blank if New TP broker profit is blank
    return prev_tp_broker_profit  # Copy the value of Prev TP broker profit if New TP broker profit exists

# Step 9: Apply the functions to create the new columns
df['Prev TP broker profit'] = df.apply(calculate_prev_tp_broker_profit, axis=1)
df['New Markup in pips'] = df.apply(calculate_new_markup, axis=1)
df['New TP broker profit'] = df.apply(calculate_new_tp_broker_profit, axis=1)
df['Specific Prev TP broker profit'] = df.apply(calculate_specific_prev_tp_broker_profit, axis=1)

# Step 10: Save the result to a new CSV file
df.to_csv(output_file, index=False)

print(f"Data has been successfully saved to {output_file}")
