library(RMySQL)
library(tidyverse)
library(lubridate)
library(rio)
library(plotly)

s <- Sys.time()

## Input
start_date_time <- "2024-08-15 00:00:00"
end_date_time <- "2024-08-15 23:59:59"

date_part <- as.Date(start_date_time)

account_type_list <- c(
  "Evaluation", 
  "Express",
  "Stellar 1-Step", 
  "Stellar 2-Step",
  "Stellar Lite 2-Step"
)

crypto_list <- c("ADAUSD","BCHUSD","BTCUSD","DOGUSD","ETHUSD","LNKUSD","LTCUSD","XLMUSD","XMRUSD","XRPUSD")

commodities_list <- c("UKOUSD", "USOUSD", "XAUUSD", "XAGUSD", "XPTUSD")

indices_list <- c("AUS200", "HK50", "EUSTX50", "FRA40", "GER30", "NTH25", "SWI20", "AUDUSD", "SPX500", "UK100", "US30", "JP225", "US2000", "NDX100")

forex_list <- c("AUDCAD", "AUDCHF", "AUDJPY", "AUDNZD", "AUDSGD", "AUDUSD", "CADCHF", "CADJPY", "CHFJPY", "EURAUD", "EURCAD", "EURCHF", "EURGBP", "EURHKD", "EURHUF", "EURJPY", "EURNOK", "EURNZD", "EURSGD", "EURTRY", "EURUSD", "GBPAUD", "GBPCAD", "GBPCHF", "GBPJPY", "GBPNZD", "GBPSGD", "GBPUSD", "MXNJPY", "NOKJPY", "NZDCAD", "NZDCHF", "NZDJPY", "NZDSGD", "NZDUSD", "SGDJPY", "USDCAD", "USDCHF", "USDCNH", "USDDKK", "USDHKD", "USDHUF", "USDJPY", "USDMXN", "USDNOK", "USDPLN", "USDSEK", "USDSGD", "USDTRY", "USDZAR", "ZARJPY", "CADEUR","AUDCHF")

### Database Connection & Tables Connection -------------------
api_backend <- dbConnect(
  MySQL(),
  dbname = "api_backend",
  user = "readonly_user",
  password = "password123",
  host = "fundednext-production.cqtlpb5sm2vt.ap-northeast-1.rds.amazonaws.com",
  port = 3306
)

suppressWarnings({
  start_time <- as.numeric(as.POSIXct(start_date_time, tz = "GMT"))
  end_time <- as.numeric(as.POSIXct(end_date_time, tz = "GMT"))
  
  trades_df <- tbl(api_backend, "trades") %>%
    filter(
      (open_time >= start_time & open_time <= end_time) |
      (close_time >= start_time & close_time <= end_time)
    ) %>%
    collect()
  
  accounts_df <- tbl(api_backend, "accounts") %>%
    filter(login %in% !!trades_df$login) %>%
    collect()
  
  customers_df <- tbl(api_backend, "customers") %>%
    filter(id %in% !!accounts_df$customer_id) %>%
    collect()
  
  countries_df <- collect(tbl(api_backend, "countries"))
  
  plans_df <- tbl(api_backend, "plans") %>%
    collect()
  
  customers_df <- customers_df %>%
    select(-country) %>%
    left_join(
      select(countries_df, country_id = id, country = name)
    )
  accounts_df <- accounts_df %>%
    left_join(
      select(customers_df, customer_id = id, country, email)
    )
})

suppressMessages({
  accounts_df_mod <- accounts_df %>%
    left_join(select(plans_df, plan_id = id, leverage), by = c("plan_id" = "plan_id")) %>%
    mutate(
      account_type = case_when(
        grepl("Evaluation", type, ignore.case=T)~"Evaluation",
        grepl("Express", type, ignore.case=T)~"Express",
        grepl("Stellar 1-Step", type, ignore.case=T)~"Stellar 1-Step",
        grepl("Stellar 2-Step", type, ignore.case=T)~"Stellar 2-Step",
        grepl("Stellar Lite 2-Step", type, ignore.case=T)~"Stellar Lite 2-Step",
        TRUE ~ "Unknown"
      ),
      account_size = ifelse(grepl("K", starting_balance), 
                            as.numeric(gsub("K", "", starting_balance)) * 1000, 
                            as.numeric(starting_balance)),
      leverage = as.numeric(leverage)  # Ensure leverage is numeric
    )
  
  trades_df_filtered <- trades_df %>%
    left_join(
      select(accounts_df_mod, id, account_type, email, account_size, country, equity, type, breachedby, leverage), by=c("account_id"="id")
    ) %>%
    filter(account_type %in% account_type_list) %>%
    filter(
      !grepl("wearenext.io", email, ignore.case=T),
      !grepl("pakeraind.com", email, ignore.case=T),
      !grepl("fundednext.com", email, ignore.case=T),
      !grepl("jayedcorp.com", email, ignore.case=T)
    ) %>%
    mutate(lot_size = volume/100) %>%
    mutate(symbol = str_replace(symbol, regex("\\.[a-z]"), "")) %>%
    mutate(type_of_symbol = case_when(
      symbol %in% crypto_list ~ "crypto",
      symbol %in% commodities_list ~ "commodities",
      symbol %in% indices_list ~ "indices",
      symbol %in% forex_list ~ "forex",
      TRUE ~ "other"
    )) %>%
    mutate(FinalLot = ifelse(grepl("^(300|700)", login), lots, lot_size)) %>%
    relocate(lots, lot_size, FinalLot, .after = login) %>%
    
    # Calculate open_time_str and close_time_str
    mutate(
      open_time_str = format(as.POSIXct(open_time, origin="1970-01-01", tz="UTC"), "%Y-%m-%d %H:%M:%S"),
      close_time_str = format(as.POSIXct(close_time, origin="1970-01-01", tz="UTC"), "%Y-%m-%d %H:%M:%S")
    ) %>%
    
    # Calculate Trade Duration in hours
    mutate(
      trade_duration = as.numeric(difftime(as.POSIXct(close_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC"),
                                           as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC"), 
                                           units = "hours"))
    ) %>%
    
    # Calculate Margin Utilization
    mutate(
      margin_utilization = case_when(
        type_of_symbol == "crypto" ~ (account_size * 1 * FinalLot) / leverage,
        type_of_symbol == "forex" ~ (account_size * 100000 * FinalLot) / leverage,
        type_of_symbol == "indices" ~ (account_size * 10 * FinalLot) / leverage,
        type_of_symbol == "commodities" ~ (account_size * 100 * FinalLot) / leverage,
        TRUE ~ NA_real_
      )
    ) %>%
    
    # Calculate Session Time
    mutate(
      session_time = case_when(
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 0, 2) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 15, 44) ~ "Market-Open Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 2, 8) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 45, 59) ~ "Prime Asia Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 9, 9) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 0, 59) ~ "Pre London Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 10, 10) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 0, 4) ~ "London Opening Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 10, 13) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 5, 59) ~ "London Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 14, 14) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 0, 59) ~ "Pre-NY Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 15, 15) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 0, 4) ~ "NY-Open Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 15, 16) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 5, 29) ~ "Pre-NYSE Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 16, 16) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 30, 35) ~ "NYSE-Open Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 16, 21) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 36, 0) ~ "NY Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 21, 22) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 1, 59) ~ "Late Trading Hours Session",
        between(hour(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 23, 23) & 
          between(minute(as.POSIXct(open_time_str, format="%Y-%m-%d %H:%M:%S", tz="UTC")), 0, 59) ~ "Market-Closing Session",
        TRUE ~ "Outside Session"
      )
    ) %>%
    
    # Calculate RRR and Risk Per Trade
    mutate(
      RRR = ifelse(profit > 0, profit / abs(open_price - sl), profit / abs(sl - open_price)),
      `Risk Per Trade` = ifelse(is.na(sl), 0, ifelse(sl > (open_price - close_price), FinalLot * (open_price - close_price), 0))
    ) %>%
    
    # Drop the specified columns and add close_price
    select(-c(close_time, type.x, digits, lots, lot_size, open_time, reason, created_at, updated_at, deleted_at)) %>%
    mutate(close_price = close_price) # Assuming close_price is already in trades_df
  
  # Reorder the final columns
  final_df <- trades_df_filtered %>%
    select(
      id, close_time_str, open_time_str, close_price, commission, login, FinalLot, 
      open_price, pips, profit, sl, swap, symbol, ticket, tp, 
      type_str, account_type, email, account_size, country, equity, 
      type.y, breachedby, type_of_symbol, RRR, `Risk Per Trade`, 
      trade_duration, margin_utilization, session_time
    )
  
  # View the data before saving
  View(final_df)
  
  # Write the CSV to the specified directory
  write_csv(final_df, paste0("Initial_", date_part, ".csv"))
  
  invisible(lapply(dbListConnections(MySQL()), dbDisconnect))
})

print(Sys.time()-s)
